"""
Fundamental Gaussian Beam Propagation
Physics: 
- Gaussian beams are solutions to the paraxial wave equation
- Key parameters: wavelength, beam waist (w0), Rayleigh range (zR)
- Intensity profile: I(r) = I0 * exp(-2r^2/w(z)^2)
- Beam width: w(z) = w0 * sqrt(1 + (z/zR)^2)
- Wavefront radius: R(z) = z * (1 + (zR/z)^2) → infinite at beam waist
"""
import numpy as np
import matplotlib.pyplot as plt

# Initialize parameters with explanations
wavelength = 1550e-9  # 1550 nm - standard telecom wavelength (low fiber attenuation)
beam_waist = 50e-6    # 50 μm beam waist (typical for integrated photonics)
distance = 0.1        # 10 cm propagation distance
x_range = 200e-6      # +-200 μm field of view
x_points = 500        # Spatial resolution
z_positions = [0, 0.05, 0.1]  # Start, middle, end
fields = {}

# Create coordinate system
x = np.linspace(-x_range, x_range, 500)

# Gaussian beam function (complex field)
def gaussian_beam(x, z, w0, wavelength):
    k = 2*np.pi/wavelength  # Wave number
    z_r = np.pi*w0**2/wavelength  # Rayleigh range (diffraction scale)
    
    # Complex beam parameter
    w_z = w0 * np.sqrt(1 + (z/z_r)**2) if z != 0 else w0      # Beam width at z
    R_z = z * (1 + (z_r/z)**2) if z != 0 else float('inf')     # Wavefront radius
    psi = np.arctan(z/z_r) if z != 0 else 0                   # Gouy phase shift
    
    # Electric field
    amplitude = w0/w_z * np.exp(-(x**2)/(w_z**2))
    phase = np.exp(-1*(k*z + k*x**2/(2*R_z) - psi))
    
    return amplitude * phase

# Calculate beam at different propagation distances

for z in z_positions:
    fields[z] = gaussian_beam(x, z, beam_waist, wavelength)

# Visualization
plt.figure(figsize=(12, 8))
for i, z in enumerate(z_positions):
    plt.subplot(2, 3, i+1)
    plt.plot(x*1e6, np.abs(fields[z])**2, 'b-')
    plt.title(f'z = {z*100:.1f} cm')
    plt.xlabel('x (μm)')
    plt.ylabel('Intensity')
    
    plt.subplot(2, 3, i+4)
    plt.plot(x*1e6, np.angle(fields[z]), 'r-')
    plt.xlabel('x (μm)')
    plt.ylabel('Phase (rad)')

plt.tight_layout()
plt.suptitle('Gaussian Beam Propagation', y=1.02)
plt.show()
